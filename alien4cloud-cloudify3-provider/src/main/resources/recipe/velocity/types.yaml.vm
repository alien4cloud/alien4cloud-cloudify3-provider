## Native types
#if($util.common.collectionHasElement(${deployment.nativeTypes}))
#foreach($nativeType in ${deployment.nativeTypes})
  ${nativeType.elementId}:
    derived_from: ${util.natives.mapToCloudifyType($nativeType)}
#set($getPersistentResourceId = ${util.natives.getPersistentResourceId($nativeType.tags)})
#set($resourceIdKey = ${util.natives.getResourceIdKey($nativeType.tags)})
#set($attributeMappings = ${util.natives.getAttributesMapping($nativeType.attributes)})
##if(${util.mapHasEntries($attributeMappings)} || $persistentResourceMapping)
    properties:
      _a4c_substitute_for:
        default: []
#foreach($attributeMapping in ${attributeMappings.entrySet()})
      _a4c_att_$attributeMapping.key:
        default:
          function: ${attributeMapping.value.function}
          parameters:
#foreach($parameter in ${attributeMapping.value.parameters})
            - $parameter
#end
#end
#if($getPersistentResourceId)
      _a4c_persistent_resources:
        default: $getPersistentResourceId
#end
#if($util.common.isFromType('tosca.nodes.BlockStorage',$nativeType))
      _a4c_device:
        description: >
          This property is needed as a workaround to fill the gap when the device property doesn't exist in Cloudify's plugin.
        default: ''
      _a4c_resource_id_key:
        description: >
          This property is used to retrieve the real IaaS id value from Cloudify's property node.
        default: $resourceIdKey
#end
##end
#end
#end
#parse("provider/${deployment.locationType}/provider_types.yaml.vm")
