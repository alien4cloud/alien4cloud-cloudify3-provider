def connect_to_vault_by_token(url, token, verify_path):
    return HashiCorpVaultClient(url=url, token=token, verify_path=verify_path)


def connect_to_vault_by_ldap(url, user, password, verify_path):
    hashi_corp_vault_client = HashiCorpVaultClient(url=url, verify_path=verify_path)
    hashi_corp_vault_client.auth_ldap(user, password)
    return hashi_corp_vault_client


vault_configuration = json.loads(client.secrets.get('vault-credentials-$deployment.deploymentPaaSId').value)

vault_client = None

import tempfile

vault_cert_content = vault_configuration['secretProviderConfiguration']['configuration'].get('certificate')
temp_vault_cert_file = None
temp_vault_cert_file_name = None
if vault_cert_content is not None:
    temp_vault_cert_file = tempfile.NamedTemporaryFile(delete=False)
    temp_vault_cert_file.write(vault_cert_content)
    temp_vault_cert_file.close()
    temp_vault_cert_file_name = temp_vault_cert_file.name

if vault_configuration['secretProviderConfiguration']['configuration'][
    'authenticationMethod'] == 'ldap':
    vault_client = connect_to_vault_by_ldap(
        url=vault_configuration['secretProviderConfiguration']['configuration']['url'],
        user=vault_configuration['credentials']['user'], password=vault_configuration['credentials']['password'],
        verify_path=temp_vault_cert_file_name)
else:
    vault_client = connect_to_vault_by_token(
        url=vault_configuration['secretProviderConfiguration']['configuration']['url'],
        token=vault_configuration['credentials']['token'], verify_path=temp_vault_cert_file_name)


def get_secret(secret_path):
    secret = vault_client.read(secret_path)
    if secret is not None:
        if 'data' in secret:
            if 'value' in secret['data']:
                return secret['data']['value']
    raise NonRecoverableError('Cannot get secret at path ' + secret_path + ', the secret does not exist or no data found at the path data.value of the secret response')
