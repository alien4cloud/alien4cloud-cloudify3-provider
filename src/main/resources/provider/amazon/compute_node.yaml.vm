#parse("provider/common/generic_resource.yaml.vm")
#foreach($compute in ${deployment.computes})
#set($computeIsWindows = (${compute.nodeTemplate.type} == "alien.cloudify.aws.nodes.WindowsCompute"))
  ${compute.id}:
    type: ${compute.nodeTemplate.type}
    properties: 
      name: ${compute.id}
#if(!${util.property.hasPropertyValue($compute.nodeTemplate.properties, "zone")})## use compute zone if none is provided
#foreach($volume in $deployment.volumes)
#if(${util.property.hasPropertyValue($volume.nodeTemplate.properties, "zone")})## use volume zone if none is provided
#foreach($relationship in $util.nonNative.getSourceRelationships($volume))
#if(${relationship.indexedToscaElement.elementId}=="tosca.relationships.AttachTo" && $compute.id == $relationship.relationshipTemplate.target)
      # Get placement properties from the volume '$volume.id'
#if(!$compute.nodeTemplate.properties.contains("parameters"))
      parameters:
        placement: $volume.nodeTemplate.properties["zone"].value
#else
#set($compute.nodeTemplate.properties["parameters"]["placement"]=$volume.nodeTemplate.properties["zone"].value)
#end## end if(!compute.nodeTemplate.properties.contains("parameters"))
#end## end if AttachTo relationship
#end## end foreach volume relationships
#break($foreach) ## break foreach volumes (take the 'zone' value from the first volume)
#end## end if volume has a 'zone' property
#end## end foreach volume
#end## end if compute hasn't a 'zone' property
${util.natives.formatProperties(3, $compute.nodeTemplate.properties, $deployment.propertyMappings.get($compute.nodeTemplate.type))}
    interfaces:
      cloudify.interfaces.lifecycle:
        create: overrides.ec2.wrapper.overrided_run_instance
#if(!$computeIsWindows)
      alien4cloud.mapping.device:
        execute:
          implementation: device-mapping-scripts/mapping.py
          inputs:
            iaas: amazon
            os_mapping: ['linux']
            device_key: device
#if(!$cloud.getDisableDiamondMonitorAgent())
#parse("provider/common/monitoring_interfaces.yaml.vm")
#end## end disable diamond
#end## if not windows
#set($publicNetworks = ${util.network.getExternalNetworks($compute)} )
#if($util.collectionHasElement(${publicNetworks}) || $computeIsWindows)
    relationships:
#foreach($externalNetwork in $publicNetworks)
      - target: ${mapping.generatedNodePrefix}_floating_ip_${compute.id}_on_${externalNetwork.id}
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip
#end## end foreach
#end## end if($util.collectionHasElement(${publicNetworks}) || $computeIsWindows)
#if($computeIsWindows)
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: ${mapping.generatedNodePrefix}_key_pair_for_${compute.id}

  ${mapping.generatedNodePrefix}_key_pair_for_${compute.id}:
    type: cloudify.aws.nodes.KeyPair
    properties:
      resource_id: ${compute.nodeTemplate.properties.get("key_pair").value}
      use_external_resource: true
      private_key_path: ${compute.nodeTemplate.properties.get("private_key_path").value}
#end## end if windows

## Add public network nodes (Elastic IPs)
#foreach($externalNetwork in $publicNetworks)
  $util.network.generateFloatingIpNodeName(${compute.id},${externalNetwork.id}):
    type: ${externalNetwork.nodeTemplate.type}
#end## end foreach external networks
#end## end foreach computes
