#*
This template is used to generate cloudify 3 recipe from alien model
- $mapping --> contains global alien --> cloudify mapping
- $providerMapping --> contains IaaS provider specific mapping configuration
- $cloud --> contains alien4cloud.paas.cloudify3.configuration.CloudConfiguration instance
- $deployment --> contains Alien's deployment and types
- $util --> contains utility methods
*#
#parse("provider/common/non_native_nodes.yaml.vm")
tosca_definitions_version: $cloud.getConfigurationLocation($deployment.locationType).getDsl()

imports:
#foreach($import in $cloud.getConfigurationLocation($deployment.locationType).getImports())
  - $import
#end

node_types:
#parse("types.yaml.vm")

#if($docker_types)
#parse("provider/kubernetes/kubernetes_types.yaml.vm")
#end## if($docker_types)

#if($util.collectionHasElement($deployment.nonNativesTypes))
#foreach($nonNativeType in ${deployment.nonNativesTypes})
  ${nonNativeType.elementId}:
    derived_from: $util.nonNative.getDerivedFromType($nonNativeType.derivedFrom)
#set( $nodeProperties = $nonNativeType.getProperties() )
#if($util.nonNative.mapHasEntries($nodeProperties))
    properties:
#foreach($property in $nodeProperties.entrySet())
      $property.key:
#if($property.value.type != "string" && $property.value.type != "integer" && $property.value.type != "float" && $property.value.type != "boolean" )
        type: string
#else
        type: $property.value.type
#end## if($property.value.type == "version")
#if($property.value.default)
        default: $property.value.default.value
#end## if($property.value.defaultValue)
        required: $property.value.required
#end## foreach($property in $nodeProperties.entrySet())
#end## if($util.nonNative.mapHasEntries($nodeProperties))
#end## foreach
#end## if($util.collectionHasElement($deployment.nonNativesTypes))

#parse("provider/common/monitor_type.yaml.vm")

#if($util.collectionHasElement($deployment.nonNativesRelationshipTypes))
relationships:
#if($util.collectionHasElement($deployment.nonNativesRelationshipTypes))
#foreach($nonNativeRelationshipType in ${deployment.nonNativesRelationshipTypes})
  ${nonNativeRelationshipType.elementId}:
    derived_from: $util.nonNative.getDerivedFromType($nonNativeRelationshipType.derivedFrom)
#end
#end
#end

node_templates:

#if($docker_types)
#parse("provider/kubernetes/kubernetes.yaml.vm")
#end
#if($deployment.locationType != "kubernetes")
#parse("provider/${deployment.locationType}/compute_node.yaml.vm")
#parse("provider/${deployment.locationType}/network_node.yaml.vm")
#parse("provider/${deployment.locationType}/volume_node.yaml.vm")
#nonNativeNodes($deployment.nonNatives)
#end## #if($deployment.locationType != "kubernetes")

#parse("provider/common/monitor_node.yaml.vm")

plugins:
  custom_wf_plugin:
    executor: central_deployment_agent
    source: custom_wf_plugin

workflows:
#foreach($wfEntry in ${deployment.workflows.workflows.entrySet()})
  a4c_${wfEntry.key}: custom_wf_plugin.plugin.workflows.a4c_${wfEntry.key}
#end
  a4c_scale:
    mapping: custom_wf_plugin.plugin.workflows.a4c_scale
    parameters:
      node_id:
        description: Which node (not node instance) to scale
      delta:
        description: >
            How many nodes should be added/removed.
            A positive number denotes increase of instances.
            A negative number denotes decrease of instances.
        default: 1
      scale_compute:
        description: >
            If node is contained (transitively) within a compute node
            and this property is 'true', operate on compute node instead
            of 'node_id'
        default: true
  a4c_heal:
    mapping: custom_wf_plugin.plugin.workflows.a4c_heal
    parameters:
      node_instance_id:
        description: Which node instance has failed
      diagnose_value:
        description: Diagnosed reason of failure
        default: Not provided