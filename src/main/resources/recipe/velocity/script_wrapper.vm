#macro(deploymentArtifactEntry $artifactName $artifactPath)
#if($util.nonNative.isArtifactDirectory($artifactPath))
#set ( $nodeArtifactChildrenPaths = $util.nonNative.listArtifactDirectory($artifactPath) )
#if($util.nonNative.mapHasEntries($nodeArtifactChildrenPaths))
    "$artifactName": [
#foreach($nodeArtifactChildPathEntry in $nodeArtifactChildrenPaths.entrySet())
        {
            "relative_path": "$nodeArtifactChildPathEntry.key",
            "absolute_path": "$nodeArtifactChildPathEntry.value"
        }
#if($velocityCount < $nodeArtifactChildrenPaths.size())
        ,
#end
#end
    ]
#end
#else
    "$artifactName": "$artifactPath"
#end
#end

#include("includes/script_wrapper_static.py")

#if($util.nonNative.operationHasDeploymentArtifacts($operation))
#include("includes/download_artifacts.py")
#end

env_map = {}
#if($util.nonNative.isOperationOwnedByNode(${operation}))
env_map['NODE'] = ctx.node.id
env_map['INSTANCE'] = ctx.instance.id
env_map['INSTANCES'] = get_instance_list(ctx.node.id)
env_map['HOST'] = get_host_node_name(ctx.instance)
#elseif($util.nonNative.isOperationOwnedByRelationship(${operation}))
env_map['TARGET_NODE'] = ctx.target.node.id
env_map['TARGET_INSTANCE'] = ctx.target.instance.id
env_map['TARGET_INSTANCES'] = get_instance_list(ctx.target.node.id)
env_map['SOURCE_NODE'] = ctx.source.node.id
env_map['SOURCE_INSTANCE'] = ctx.source.instance.id
env_map['SOURCE_INSTANCES'] = get_instance_list(ctx.source.node.id)
#end
#foreach($inputEntry in $operation.inputParameters.entrySet())
env_map['$inputEntry.key'] = $util.nonNative.formatValue(${operation.owner}, $inputEntry.value)
#end
#foreach($inputEntry in $operation.inputParameters.entrySet())
#if($util.nonNative.isGetAttributeFunctionPropertyValue($inputEntry.value))
other_instances_map = _all_instances_$util.nonNative.formatValue(${operation.owner}, $inputEntry.value)
if other_instances_map is not None:
    for other_instances_key in other_instances_map:
        env_map[other_instances_key + '$inputEntry.key'] = other_instances_map[other_instances_key]
#end
#end
new_script_process = {'env': env_map}

#if($util.nonNative.operationHasDeploymentArtifacts($operation))
node_artifacts = {
#foreach($nodeArtifactsEntry in $operation.allDeploymentArtifacts.entrySet())
#foreach($nodeArtifactEntry in $nodeArtifactsEntry.value.entrySet())
#set( $nodeArtifactPath = ${util.nonNative.getArtifactPath(${nodeArtifactsEntry.key}, ${nodeArtifactEntry.key}, ${nodeArtifactEntry.value})} )
#deploymentArtifactEntry($nodeArtifactEntry.key, $nodeArtifactPath)
#if($velocityCount < $nodeArtifactsEntry.value.size())
    ,
#end
#end
#if($velocityCount < $operation.allDeploymentArtifacts.size())
    ,
#end
#end
}

relationship_artifacts = {
#foreach($relationshipArtifactsEntry in $operation.allRelationshipDeploymentArtifacts.entrySet())
#foreach($relationshipArtifactEntry in $relationshipArtifactsEntry.value.entrySet())
#set($relationshipArtifactPath = ${util.nonNative.getRelationshipArtifactPath(${relationshipArtifactsEntry.key.source}, ${relationshipArtifactsEntry.key.id}, ${relationshipArtifactEntry.key}, ${relationshipArtifactEntry.value})} )
#deploymentArtifactEntry($relationshipArtifactEntry.key, $relationshipArtifactPath)
#if($velocityCount < $relationshipArtifactsEntry.value.size())
    ,
#end
#end
#if($velocityCount < $operation.allRelationshipDeploymentArtifacts.size())
    ,
#end
#end
}

artifacts = node_artifacts.copy()
artifacts.update(relationship_artifacts)

download_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'downloads')
new_script_process['env'].update(download_artifacts(artifacts, download_dir))
#end

ctx.logger.info('Operation is executed with inputs {0}'.format(inputs))
if inputs.get('process', None) is not None and inputs['process'].get('env', None) is not None:
    ctx.logger.info('Operation is executed with environment variable {0}'.format(inputs['process']['env']))
    new_script_process['env'].update(inputs['process']['env'])

operationOutputNames = None
#if(${operation.getOutputs()} && !${operation.getOutputs().isEmpty()})
operationOutputNames = '${util.nonNative.getOperationOutputNames(${operation})}'
#end
convert_env_value_to_string(new_script_process['env'])
#if($util.nonNative.isOperationOwnedByRelationship(${operation}))
parsed_output = execute(ctx.download_resource('${util.nonNative.getRelationshipImplementationArtifactPath(${operation.owner}, ${operation.interfaceName}, ${operation.operationName}, ${operation.implementationArtifact})}'), new_script_process, operationOutputNames)
#else
parsed_output = execute(ctx.download_resource('${util.nonNative.getImplementationArtifactPath(${operation.owner}, ${operation.interfaceName}, ${operation.operationName}, ${operation.implementationArtifact})}'), new_script_process, operationOutputNames)
#end
for k,v in parsed_output['outputs'].items():
    ctx.logger.info('Output name: {0} value: {1}'.format(k, v))
#if($util.nonNative.isOperationOwnedByRelationship(${operation}))
    ctx.source.instance.runtime_properties['_a4c_OO:${operation.interfaceName}:${operation.operationName}:{0}'.format(k)] = v
#else
    ctx.instance.runtime_properties['_a4c_OO:${operation.interfaceName}:${operation.operationName}:{0}'.format(k)] = v
#end

#macro(setAttributes $owner $entity $attributes $context)
#if($attributes)
#foreach($attributeEntry in ${attributes.entrySet()})
#if($util.nonNative.isFunctionPropertyValue($attributeEntry.value))
${entity}.runtime_properties['${attributeEntry.key}'] = ${util.nonNative.formatFunctionPropertyValue($context, $owner, $attributeEntry.value)}
#elseif($util.nonNative.isConcatPropertyValue($attributeEntry.value))
${entity}.runtime_properties['${attributeEntry.key}'] = ${util.nonNative.formatConcatPropertyValue($context, $owner, $attributeEntry.value)}
#else
${entity}.runtime_properties['${attributeEntry.key}'] = '${attributeEntry.value.value}'
#end
#end
${entity}.update()
#end
#end

#setAttributes(${operation.owner}, "ctx.instance", $util.nonNative.getNodeAttributes(${operation.owner}), "")
#if($util.nonNative.isOperationOwnedByRelationship(${operation}))
#setAttributes(${util.nonNative.getSourceNode(${operation.owner})}, "ctx.source.instance", $util.nonNative.getSourceRelationshipAttributes(${operation.owner}), ".source")
#setAttributes(${util.nonNative.getTargetNode(${operation.owner})}, "ctx.target.instance", $util.nonNative.getTargetRelationshipAttributes(${operation.owner}), ".target")
#end
