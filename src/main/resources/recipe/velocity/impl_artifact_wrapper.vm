#**
Define a macro to render a python map entry of node and relationship deployment artifacts.
A TOSCA artifact can be a directory and reference mutliple sub-artifacts.
The generated entry map is as follows:
File artifact:
    artifactName: PATH_OF_FILE_RELATIVE_TO_THE_GENERATED_ARCHIVE,
Directory artifact:
    artifactName: [
        {
            relative_path: PATH_OF_FILE_1_RELATIVE_TO_THE_DIRECTORY,
            absolute_path: PATH_OF_FILE_1_RELATIVE_TO_THE_GENERATED_ARCHIVE
        },
        {
            relative_path: PATH_OF_FILE_N_RELATIVE_TO_THE_DIRECTORY,
            absolute_path: PATH_OF_FILE_N_RELATIVE_TO_THE_GENERATED_ARCHIVE
        }
    ]
*#
#macro(deploymentArtifactEntry $artifactName $artifactPath)
#if($util.nonNative.isArtifactDirectory($artifactPath))
#set ( $nodeArtifactChildrenPaths = $util.nonNative.listArtifactDirectory($artifactPath) )
#if($util.nonNative.mapHasEntries($nodeArtifactChildrenPaths))
    "$artifactName": [
#foreach($nodeArtifactChildPathEntry in $nodeArtifactChildrenPaths.entrySet())
        {
            "relative_path": "$nodeArtifactChildPathEntry.key",
            "absolute_path": "$nodeArtifactChildPathEntry.value"
        }
#if($velocityCount < $nodeArtifactChildrenPaths.size())
        ,
#end
#end
    ]
#end
#else
    "$artifactName": "$artifactPath"
#end
#end
## End of deployment artifact entry macro ..

#**
Include static wrapper python (functions etc.) in the current file.
TODO: For smaller packages we should improve that and actually make a python package to import (from )
*#
#include("includes/common_wrapper_static.py")
#if($util.nonNative.operationHasDeploymentArtifacts($operation))
#include("includes/download_artifacts.py")
#end

#**
TOSCA environment variables mapping as defined in specification.
*#
env_map = {}
#if($util.nonNative.isOperationOwnedByNode(${operation}))
env_map['NODE'] = ctx.node.id
env_map['INSTANCE'] = ctx.instance.id
env_map['INSTANCES'] = get_instance_list(ctx.node.id)
env_map['HOST'] = get_host_node_name(ctx.instance)

## Map additional environment variables that can be usefull for configuration tools artifacts (Ansible, Chef, Puppet, etc.).
env_map['A4C_EXECUTION_HOST'] = get_attribute(ctx, 'ip_address')
env_map['A4C_EXECUTION_USER'] = get_attribute_user(ctx)
env_map['A4C_EXECUTION_KEY'] = get_attribute_key(ctx)

#elseif($util.nonNative.isOperationOwnedByRelationship(${operation}))
env_map['TARGET_NODE'] = ctx.target.node.id
env_map['TARGET_INSTANCE'] = ctx.target.instance.id
env_map['TARGET_INSTANCES'] = get_instance_list(ctx.target.node.id)
env_map['SOURCE_NODE'] = ctx.source.node.id
env_map['SOURCE_INSTANCE'] = ctx.source.instance.id
env_map['SOURCE_INSTANCES'] = get_instance_list(ctx.source.node.id)

## Test if operation should be executed on source or target
#if($operation.operationName.matches("(pre|post)_configure_target|(add|remove)_source"))
env_map['A4C_EXECUTION_HOST'] = get_attribute(ctx.target, 'ip_address')
env_map['A4C_EXECUTION_USER'] = get_attribute_user(ctx.target)
env_map['A4C_EXECUTION_KEY'] = get_attribute_key(ctx.target)
#else
env_map['A4C_EXECUTION_HOST'] = get_attribute(ctx.source, 'ip_address')
env_map['A4C_EXECUTION_USER'] = get_attribute_user(ctx.source)
env_map['A4C_EXECUTION_KEY'] = get_attribute_key(ctx.source)
#end## if(($operation.operationName).matches("(pre|post)_configure_target|(add|remove)_source"))
#end##elseif($util.nonNative.isOperationOwnedByRelationship(${operation}))

###################### If the method is the create method we inject node initialization here.
#if($operation.interfaceName == "tosca.interfaces.node.lifecycle.Standard" && $operation.operationName == "create")
## Make all node property an attribute
#foreach($propertyEntry in $util.common.safeEntrySet($operation.owner.nodeTemplate.properties))
#if(!$util.common.isNull($propertyEntry.value))
ctx.instance.runtime_properties['$propertyEntry.key'] = $util.property.formatValueForceEscape(false, 0, $propertyEntry.value)
#end
#end##foreach($propertyEntry in $util.common.safeEntrySet($operation.owner.nodeTemplate.properties))

## Make all node capability property an attribute
#foreach($capabilityEntry in $util.common.safeEntrySet($operation.owner.nodeTemplate.capabilities))
#foreach($propertyEntry in $util.common.safeEntrySet($capabilityEntry.value.properties))
#if(!$util.common.isNull($propertyEntry.value))
ctx.instance.runtime_properties['capabilities.${capabilityEntry.key}.${propertyEntry.key}'] = $util.property.formatValueForceEscape(false, 0, $propertyEntry.value)
#end
#end##foreach($propertyEntry in $util.common.safeEntrySet($capabilityEntry.value.properties))
## Inject the host ip address into every tosca.capabilities.Endpoint capabilities
#if($util.nonNative.isEndpoint($capabilityEntry.value))
ctx.instance.runtime_properties['capabilities.${capabilityEntry.key}.ip_address'] = get_public_or_private_ip(ctx)
#end
#end##foreach($capabilityEntry in $util.common.safeEntrySet(template.nodeTemplate.capabilities))

## Inject all default attribute values
#if(!$util.common.isNull($template.nodeTemplate.attributeValues))
#foreach($attributeEntry in ${template.nodeTemplate.attributeValues.entrySet()})
ctx.instance.runtime_properties['${attributeEntry.key}'] = '${attributeEntry.value}'
#end## foreach($attributeEntry in ${attributes.entrySet()})
#end##isNull($template.nodeTemplate.attributeValues)
#end##if($operation.operationName == "create")
###################### END If the method is the create method we inject node initialization here.

#foreach($inputEntry in $operation.inputParameters.entrySet())
env_map['$inputEntry.key'] = $util.nonNative.formatValue(${operation.owner}, $inputEntry.value)
#end

#foreach($inputEntry in $operation.inputParameters.entrySet())
#if($util.nonNative.isGetAttributeFunctionPropertyValue($inputEntry.value))
other_instances_map = _all_instances_$util.nonNative.formatValue(${operation.owner}, $inputEntry.value)
if other_instances_map is not None:
    for other_instances_key in other_instances_map:
        env_map[other_instances_key + '$inputEntry.key'] = other_instances_map[other_instances_key]
#end
#end

#if($util.nonNative.operationHasDeploymentArtifacts($operation))
node_artifacts = {
#foreach($nodeArtifactsEntry in $operation.allDeploymentArtifacts.entrySet())
#foreach($nodeArtifactEntry in $nodeArtifactsEntry.value.entrySet())
#set( $nodeArtifactPath = ${util.nonNative.getArtifactPath(${nodeArtifactsEntry.key}, ${nodeArtifactEntry.key}, ${nodeArtifactEntry.value})} )
#deploymentArtifactEntry($nodeArtifactEntry.key, $nodeArtifactPath)
#if($velocityCount < $nodeArtifactsEntry.value.size())
    ,
#end
#end
#if($velocityCount < $operation.allDeploymentArtifacts.size())
    ,
#end
#end
}

relationship_artifacts = {
#foreach($relationshipArtifactsEntry in $operation.allRelationshipDeploymentArtifacts.entrySet())
#foreach($relationshipArtifactEntry in $relationshipArtifactsEntry.value.entrySet())
#set($relationshipArtifactPath = ${util.nonNative.getRelationshipArtifactPath(${relationshipArtifactsEntry.key.source}, ${relationshipArtifactsEntry.key.id}, ${relationshipArtifactEntry.key}, ${relationshipArtifactEntry.value})} )
#deploymentArtifactEntry($relationshipArtifactEntry.key, $relationshipArtifactPath)
#if($velocityCount < $relationshipArtifactsEntry.value.size())
    ,
#end
#end
#if($velocityCount < $operation.allRelationshipDeploymentArtifacts.size())
    ,
#end
#end
}

artifacts = node_artifacts.copy()
artifacts.update(relationship_artifacts)

download_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'downloads')
env_map.update(download_artifacts(artifacts, download_dir))
#end

## Add current environment variables
if inputs.get('process', None) is not None and inputs['process'].get('env', None) is not None:
    ctx.logger.info('Operation is executed with environment variable {0}'.format(inputs['process']['env']))
    env_map.update(inputs['process']['env'])

## Executor template depends on the artifact type and provides the right wrapper.
#if($executor_template)
#parse($executor_template)
#end

## Register operation outputs (as tosca allow reference to operation execution outputs)
for k,v in outputs:
    ctx.logger.info('Output name: {0} value: {1}'.format(k, v))
#if($util.nonNative.isOperationOwnedByRelationship(${operation}))
    ctx.source.instance.runtime_properties['_a4c_OO:${operation.interfaceName}:${operation.operationName}:{0}'.format(k)] = v
#else
    ctx.instance.runtime_properties['_a4c_OO:${operation.interfaceName}:${operation.operationName}:{0}'.format(k)] = v
#end

#macro(setAttributes $owner $entity $attributes $context)
#if($attributes)
#foreach($attributeEntry in ${attributes.entrySet()})
#if($util.nonNative.isFunctionPropertyValue($attributeEntry.value))
${entity}.runtime_properties['${attributeEntry.key}'] = ${util.nonNative.formatFunctionPropertyValue($context, $owner, $attributeEntry.value)}
#elseif($util.nonNative.isConcatPropertyValue($attributeEntry.value))
${entity}.runtime_properties['${attributeEntry.key}'] = ${util.nonNative.formatConcatPropertyValue($context, $owner, $attributeEntry.value)}
#else
${entity}.runtime_properties['${attributeEntry.key}'] = '${attributeEntry.value.value}'
#end## if($util.nonNative.isFunctionPropertyValue($attributeEntry.value))
#end## foreach($attributeEntry in ${attributes.entrySet()})
#if($util.nonNative.isCustomResource($owner) && $util.nonNative.isCompute($owner))
if ${entity}.runtime_properties.get('ip_address', None) is not None:
  ${entity}.runtime_properties['ip'] = ${entity}.runtime_properties['ip_address']
if ${entity}.runtime_properties.get('public_ip_address', None) is not None:
  ${entity}.runtime_properties['public_ip'] = ${entity}.runtime_properties['public_ip_address']
#end## if
${entity}.update()
#end## if($attributes)
#end## macro

#setAttributes(${operation.owner}, "ctx.instance", $util.nonNative.getNodeAttributes(${operation.owner}), "")
#if($util.nonNative.isOperationOwnedByRelationship(${operation}))
#setAttributes(${util.nonNative.getSourceNode(${operation.owner})}, "ctx.source.instance", $util.nonNative.getSourceRelationshipAttributes(${operation.owner}), ".source")
#setAttributes(${util.nonNative.getTargetNode(${operation.owner})}, "ctx.target.instance", $util.nonNative.getTargetRelationshipAttributes(${operation.owner}), ".target")
#end
