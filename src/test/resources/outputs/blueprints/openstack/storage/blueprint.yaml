



tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml

node_types:
  alien.nodes.openstack.Compute:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      _a4c_substitute_for:
        default: []
      _a4c_att_ip_address:
        default:
          function: get_attribute
          parameters:
            - SELF
            - ip
      _a4c_att_public_ip_address:
        default:
          function: get_attribute
          parameters:
            - TARGET
            - cloudify.openstack.server_connected_to_floating_ip
            - floating_ip_address
  alien.nodes.openstack.PublicNetwork:
    derived_from: cloudify.openstack.nodes.FloatingIP
    properties:
      _a4c_substitute_for:
        default: []
  alien.cloudify.openstack.nodes.Volume:
    derived_from: cloudify.openstack.nodes.Volume
    properties:
      _a4c_substitute_for:
        default: []
      _a4c_att_device:
        default:
          function: get_attribute
          parameters:
            - SELF
            - device_name
      _a4c_persistent_resources:
        default: {"external_id":"volume_id"}
      _a4c_device:
        description: >
          This property is needed as a workaround to fill the gap when the device property doesn't exist in Cloudify's plugin.
        default: ''
      _a4c_resource_id_key:
        description: >
          This property is used to retrieve the real IaaS id value from Cloudify's property node.
        default: resource_id

  alien.nodes.LinuxFileSystem:
    derived_from: cloudify.nodes.SoftwareComponent

relationships:
  alien.relationships.LinuxPartition:
    derived_from: cloudify.relationships.depends_on

node_templates:

  Compute:
    type: alien.nodes.openstack.Compute
    properties: 
      flavor: 2
      image: 02ddfcbb-9534-44d7-974d-5cfd36dfbcab
      cloudify_agent: 
        user: ubuntu
    relationships:
      - target: _a4c_floating_ip_Compute_on_PublicNetwork
        type: cloudify.openstack.server_connected_to_floating_ip
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
               interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
               CPUCollector: {}
               MemoryCollector: {}
               LoadAverageCollector: {}
               DiskUsageCollector:
                 config:
                   devices: x?vd[a-z]+[0-9]*$
               NetworkCollector: {}
  _a4c_floating_ip_Compute_on_PublicNetwork:
    type: alien.nodes.openstack.PublicNetwork
    properties: 
  CBS3:
    type: alien.cloudify.openstack.nodes.Volume
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: overrides.openstack.wrapper.overrided_create
          inputs:
            args: {}
        delete: {}
    properties: 
      volume: 
        size: 1
    relationships:
      - target: Compute
        type: cloudify.openstack.volume_attached_to_server
  CBS2:
    type: alien.cloudify.openstack.nodes.Volume
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: overrides.openstack.wrapper.overrided_create
          inputs:
            args: {}
        delete: {}
    properties: 
      volume: 
        size: 1
    relationships:
      - target: Compute
        type: cloudify.openstack.volume_attached_to_server
  CBS1:
    type: alien.cloudify.openstack.nodes.Volume
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: overrides.openstack.wrapper.overrided_create
          inputs:
            args: {}
        delete: {}
    properties: 
      volume: 
        size: 1
    relationships:
      - target: Compute
        type: cloudify.openstack.volume_attached_to_server
  CBS4:
    type: alien.cloudify.openstack.nodes.Volume
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: overrides.openstack.wrapper.overrided_create
          inputs:
            args: {}
        delete: {}
    properties: 
      volume: 
        size: 1
    relationships:
      - target: Compute
        type: cloudify.openstack.volume_attached_to_server

  LinuxFileSystem_1:
    type: alien.nodes.LinuxFileSystem
    instances:
      deploy: 1
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: wrapper/LinuxFileSystem_1/tosca.interfaces.node.lifecycle.Standard/stop/_a4c_stop.py
        start: wrapper/LinuxFileSystem_1/tosca.interfaces.node.lifecycle.Standard/start/_a4c_start.py
    relationships:
      - target: Compute
        type: cloudify.relationships.contained_in
      - target: CBS1
        type: alien.relationships.LinuxPartition
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure: wrapper/LinuxFileSystem_1_CBS1/linuxPartitionCBS1/tosca.interfaces.relationship.Configure/pre_configure_source/_a4c_pre_configure_source.py
            postconfigure: wrapper/LinuxFileSystem_1_CBS1/linuxPartitionCBS1/tosca.interfaces.relationship.Configure/post_configure_source/_a4c_post_configure_source.py
  LinuxFileSystem_2:
    type: alien.nodes.LinuxFileSystem
    instances:
      deploy: 1
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: wrapper/LinuxFileSystem_2/tosca.interfaces.node.lifecycle.Standard/stop/_a4c_stop.py
        start: wrapper/LinuxFileSystem_2/tosca.interfaces.node.lifecycle.Standard/start/_a4c_start.py
    relationships:
      - target: Compute
        type: cloudify.relationships.contained_in
      - target: CBS2
        type: alien.relationships.LinuxPartition
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure: wrapper/LinuxFileSystem_2_CBS2/linuxPartitionCBS2/tosca.interfaces.relationship.Configure/pre_configure_source/_a4c_pre_configure_source.py
            postconfigure: wrapper/LinuxFileSystem_2_CBS2/linuxPartitionCBS2/tosca.interfaces.relationship.Configure/post_configure_source/_a4c_post_configure_source.py
  LinuxFileSystem_3:
    type: alien.nodes.LinuxFileSystem
    instances:
      deploy: 1
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: wrapper/LinuxFileSystem_3/tosca.interfaces.node.lifecycle.Standard/stop/_a4c_stop.py
        start: wrapper/LinuxFileSystem_3/tosca.interfaces.node.lifecycle.Standard/start/_a4c_start.py
    relationships:
      - target: Compute
        type: cloudify.relationships.contained_in
      - target: CBS3
        type: alien.relationships.LinuxPartition
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure: wrapper/LinuxFileSystem_3_CBS3/linuxPartitionCBS3/tosca.interfaces.relationship.Configure/pre_configure_source/_a4c_pre_configure_source.py
            postconfigure: wrapper/LinuxFileSystem_3_CBS3/linuxPartitionCBS3/tosca.interfaces.relationship.Configure/post_configure_source/_a4c_post_configure_source.py
  LinuxFileSystem_4:
    type: alien.nodes.LinuxFileSystem
    instances:
      deploy: 1
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: wrapper/LinuxFileSystem_4/tosca.interfaces.node.lifecycle.Standard/stop/_a4c_stop.py
        start: wrapper/LinuxFileSystem_4/tosca.interfaces.node.lifecycle.Standard/start/_a4c_start.py
    relationships:
      - target: Compute
        type: cloudify.relationships.contained_in
      - target: CBS4
        type: alien.relationships.LinuxPartition
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure: wrapper/LinuxFileSystem_4_CBS4/linuxPartitionCBS4/tosca.interfaces.relationship.Configure/pre_configure_source/_a4c_pre_configure_source.py
            postconfigure: wrapper/LinuxFileSystem_4_CBS4/linuxPartitionCBS4/tosca.interfaces.relationship.Configure/post_configure_source/_a4c_post_configure_source.py



groups:
  _a4c_Compute:
    members: [Compute, CBS3, CBS2, CBS1, CBS4, _a4c_floating_ip_Compute_on_PublicNetwork]

policies:
  _a4c_Compute_policy:
    type: cloudify.policies.scaling
    targets: [_a4c_Compute]
    properties:
      default_instances: 2


plugins:
  custom_wf_plugin:
    executor: central_deployment_agent
    source: custom_wf_plugin
  overrides:
    executor: central_deployment_agent
    source: overrides

workflows:
  a4c_install: custom_wf_plugin.plugin.workflows.a4c_install
  a4c_uninstall: custom_wf_plugin.plugin.workflows.a4c_uninstall
  a4c_scale:
    mapping: custom_wf_plugin.plugin.workflows.a4c_scale
    parameters:
      node_id:
        description: Which node (not node instance) to scale
      delta:
        description: >
            How many nodes should be added/removed.
            A positive number denotes increase of instances.
            A negative number denotes decrease of instances.
        default: 1
      scale_compute:
        description: >
            If a node name is passed as the `scalable_entity_name` parameter
            and that node is contained (transitively) within a compute node
            and this property is 'true', operate on the compute node instead
            of the specified node.
        default: true
      ignore_failure:
        default: false
  a4c_heal:
    mapping: custom_wf_plugin.plugin.workflows.a4c_heal
    parameters:
      node_instance_id:
        description: Which node instance has failed
      diagnose_value:
        description: Diagnosed reason of failure
        default: Not provided
